//
// Lexical grammar
//
SourceCharacter ::
	> any Unicode code point

LineTerminator ::
	<LF>
	<CR>
	<LS>
	<PS>

IdentifierName ::
	IdentifierStart
	IdentifierName IdentifierPart

IdentifierStart ::
	UnicodeIDStart
	`_`

IdentifierPart ::
	UnicodeIDContinue
	`_`
	<ZWNJ>
	<ZWJ>
	
UnicodeIDStart ::
	> any Unicode code point with the Unicode property "ID_Start" or "Other_ID_Start"

UnicodeIDContinue ::
	> any Unicode code point with the Unicode property "ID_Continue" or "Other_ID_Continue", or "Other_ID_Start"

ReservedWord ::
	Keyword
	
Keyword :: one of
	`empty`
	`lookahead`
	`lexical`
	`goal`
	`no`
	`here`
	`one`
	`of`
	`or`
	`but`
	`not`	

DecimalDigit :: one of
	`0` `1` `2` `3` `4` `5` `6` `7` `8` `9`

HexDigit :: one of
	`0` `1` `2` `3` `4` `5` `6` `7` `8` `9` `a` `b` `c` `d` `e` `f` `A` `B` `C` `D` `E` `F`

UnicodeCharacterLiteral ::
	`<` UnicodeCharacterLiteralChars `>`

UnicodeCharacterLiteralChars ::
	UnicodeCharacterLiteralChar UnicodeCharacterLiteralChars?

UnicodeCharacterLiteralChar ::
	SourceCharacter but not one of `<` or `>` or LineTerminator
	
Indent ::
	> An increase in the indentation depth from the previous line.
	
Dedent ::
	> A decrease in the indentation depth from the previous line.

Terminal ::
	``` ``` ```
	``` TerminalChars ```

TerminalChars ::
	TerminalChar TerminalChars?

TerminalChar ::
	SourceCharacter but not one of ``` or LineTerminator

Prose ::
	ProseLines

ProseLines ::
	ProseLine
	ProseLine LineTerminator ProseLines
	
ProseLine ::
	`>` ProseChars?

ProseChars ::
	ProseChar ProseChars?

ProseChar ::
	SourceCharacter but not LineTerminator

//
// Syntactic grammar
//
Identifier :
	IdentifierName but not ReservedWord

Argument :
	Identifier

Arguments :
	`(` `)`
	`(` ArgumentList `)`

ArgumentList :
	Argument
	ArgumentList `,` Argument

PrimarySymbol :
	Terminal
	UnicodeCharacterLiteral
	Nonterminal
	
Nonterminal :
	Identifier Arguments?

OptionalSymbol :
	PrimarySymbol `?`?

OrClause :
	PrimarySymbol
	OrClause `or` PrimarySymbol

OneOfSymbol :
	PrimarySymbol
	`one` `of` OrClause

UnarySymbol :
	OneOfSymbol

ButNotSymbol :
	UnarySymbol `but` `not` UnarySymbol

BinarySymbol :
	ButNotSymbol
	UnarySymbol

SymbolList :
	PrimarySymbol
	SymbolList `,` PrimarySymbol

SymbolSet :
	`{` SymbolList `}`

EmptyAssertionClause :
	`empty`

LookaheadEqualsAssertionClause :
	`lookahead` `==` PrimarySymbol

LookaheadNotEqualsAssertionClause :
	`lookahead` `!=` PrimarySymbol

LookaheadInAssertionClause :
	`lookahead` `<-` SymbolSet

LookaheadNotInAssertionClause :
	`lookahead` `<!` SymbolSet

LookaheadAssertionClause :
	LookaheadEqualsAssertionClause
	LookaheadNotEqualsAssertionClause
	LookaheadInAssertionClause
	LookaheadNotInAssertionClause

NoSymbolAssertionClause :
	`no` OrClause `here`

LexicalGoalAssertionClause :
	`lexical` `goal` PrimarySymbol

ParameterValueAssertionClause :
	`~` Identifier
	`+` Identifier

AssertionClause :
	EmptyAssertionClause
	LookaheadAssertionClause
	NoSymbolAssertionClause
	LexicalGoalAssertionClause
	ParameterValueAssertionClause

Assertion :
	`[` AssertionClause `]`
	
ProseSpan :
	Prose
	ProseSpan LineTerminator Prose

Symbol :
	Assertion
	BinarySymbol

SymbolSpan :
	ProseSpan
	SymbolSpanRest

SymbolSpanRest :
	Symbol SymbolSpanRest?

RightHandSideList :
	RightHandSide RightHandSideList?

RightHandSide :
	SymbolSpan LineTerminator

Terminals :
	Terminal Terminals?

TerminalList :
	Terminals
	TerminalList LineTerminator Terminals

OneOfList :
	`one` `of` Terminals
	`one` `of` LineTerminator Indent TerminalList Dedent

Parameter :
	Identifier

ParameterList :
	Parameter
	ParameterList `,` Parameter

Parameters :
	`(` ParameterList `)`

Production :
	Identifier Parameters? `:` OneOfList
	Identifier Parameters? `:` RightHandSide
	Identifier Parameters? `:` LineTerminator Indent RightHandSideList Dedent

SourceElement :
	[empty]
	Production

SourceElements :
	SourceElement SourceElements?	

SourceFile :
	SourceElements
