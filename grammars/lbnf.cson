name: "Labelled Backus-Naur Form"
scopeName: "source.lbnf"
fileTypes: ["cf", "lbnf"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comments"}
			{include: "#list"}
			{include: "#label"}
			{include: "#category"}
			{include: "#pragmas"}
			{include: "#definition"}
			{include: "#rhs"}
		]


	# { Braced region }
	braces:
		name:  "meta.braces.lbnf"
		begin: "{"
		end:   "}"
		beginCaptures: 0: name: "punctuation.definition.curly.bracket.begin.lbnf"
		endCaptures:   0: name: "punctuation.definition.curly.bracket.end.lbnf"
		patterns: [include: "#rhs"]
		

	# Definition category
	category:
		match: "(?:(?<=\\.)|(?<=\\[)\\G)\\s*((?!\\d)\\w+)"
		captures:
			1: name: "entity.name.tag.category.lbnf"

	
	# Single character: 'c'
	character:
		name: "string.quoted.single.character.lbnf"
		match: "(').(')"
		captures:
			1: name: "punctuation.definition.string.begin.lbnf"
			2: name: "punctuation.definition.string.end.lbnf"

	
	# Comments
	comments:
		patterns: [{
			# -- Single line
			name:  "comment.line.double-dash.lbnf"
			begin: "--"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.lbnf"
		},{
			# {- Block comment -}
			name:  "comment.block.lbnf"
			begin: "{-"
			end:   "-}"
			beginCaptures: 0: name: "punctuation.definition.comment.begin.lbnf"
			endCaptures:   0: name: "punctuation.definition.comment.end.lbnf"
		}]


	# … ::= … [Defs]
	definition:
		name:  "meta.definition.lbnf"
		begin: "::="
		end:   "(?=;)"
		beginCaptures:
			0: name: "keyword.operator.assignment.lbnf"
		patterns: [include: "#rhs"]


	#  <Label> . …
	label:
		match: "(?:(?:^\|\\G)\\s*(?!\\d)(\\w+)\\s*|(?<=\\]|\\))\\s*)(\\.)"
		captures:
			1: name: "entity.name.label.lbnf"
			2: name: "keyword.operator.label-separator.lbnf"


	# Stuff inside [Square brackets] or (Round brackets)
	list:
		patterns: [{
			# Cons rule label: (:)
			name:  "meta.list.cons-rule.lbnf"
			match: "(\\()(:)(\\))"
			captures:
				1: name: "punctuation.section.round.bracket.begin.lbnf"
				2: patterns: [include: "#misc-operators"]
				3: name: "punctuation.section.round.bracket.end.lbnf"
		},{
			# One-element list: (:[])
			name:  "meta.list.one-element.lbnf"
			match: "(\\()(:)(\\[\\])(\\))"
			captures:
				1: name: "punctuation.section.round.bracket.begin.lbnf"
				2: patterns: [include: "#misc-operators"]
				3: patterns: [include: "#list-empty"]
				4: name: "punctuation.section.round.bracket.end.lbnf"
		},{
			# Nil rule label: []
			include: "#list-empty"
		},{
			# [Category]
			name:  "meta.list.lbnf"
			begin: "\\["
			end:   "\\]"
			beginCaptures: 0: name: "punctuation.section.group.square.bracket.begin.lbnf"
			endCaptures:   0: name: "punctuation.section.group.square.bracket.end.lbnf"
			patterns: [include: "#list-innards"]
		},{
			# (Parenthetical list)
			name:  "meta.list.parenthetical.lbnf"
			begin: "\\("
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.section.round.bracket.begin.lbnf"
			endCaptures:   0: name: "punctuation.section.round.bracket.end.lbnf"
			patterns: [include: "#list-innards"]
		}]

	"list-empty":
		name:  "meta.list.empty.lbnf"
		match: "(\\[)(\\])"
		captures:
			1: name: "punctuation.section.group.square.bracket.begin.lbnf"
			2: name: "punctuation.section.group.square.bracket.end.lbnf"

	"list-innards":
		patterns: [
			{include: "#reference"}
			{include: "#comments"}
			{include: "#list"}
			{include: "#rhs"}
		]


	# Reserved keywords
	"misc-keywords":
		name: "keyword.operator.reserved-word.$1.lbnf"
		match: """(?x) \\b
			( char
			| coercions
			| comment
			| digit
			| entrypoints
			| eps
			| internal
			| layout
			| letter
			| lower
			| nonempty
			| position
			| rules
			| separator
			| stop
			| terminator
			| token
			| toplevel
			| upper
			) \\b
		"""

	
	# Assorted symbols
	"misc-operators":
		patterns: [
			{match: ":", name: "punctuation.definition.cons-rule.colon.lbnf"}
			{match: ",", name: "punctuation.delimiter.comma.lbnf"}
			{match: "-", name: "keyword.operator.arithmetic.subtraction.lbnf"}
		]


	# Integer or floating-point value
	number:
		name: "constant.numeric.decimal.lbnf"
		match: "-?\\d+(?:\\.\\d+)?"


	# Pragmas
	pragmas:
		patterns: [{
			# rules Type ::= … ;
			name:  "meta.praga.$1.lbnf"
			begin: "(?:^|\\G)\\s*(rules)\\s+(\\w+)\\s*(?=::=)"
			end:   "(?=;)"
			beginCaptures:
				1: name: "keyword.control.directive.pragma.$1.lbnf"
				2: name: "entity.name.type.lbnf"
			patterns: [include: "#definition"]
		},{
			# comment "/*" "*/" ;
			name:  "meta.pragma.comment-syntax.lbnf"
			begin: "(?:^|\\G)\\s*(comment)(?=\\s|$)"
			end:   "(?=;|$)"
			beginCaptures:
				1: name: "keyword.control.directive.pragma.$1-syntax.lbnf"
			patterns: [include: "#rhs"]
		},{
			# Everything else
			name: "meta.pragma.$1.lbnf"
			begin: """(?x) (?:^|\\G)\\s*
				( coercions
				| entrypoints
				| layout (?:\\s+(stop|toplevel))?
				| (position\\s+)? token
				| rules
				| separator
				| terminator
				) (?=\\s|$)
			"""
			end: "$|(?=;)"
			beginCaptures:
				1: name: "keyword.control.directive.pragma.$1.lbnf"
				2: name: "keyword.control.layout-command.lbnf"
			patterns: [include: "#rhs"]
		}]


	# Stuff matched after `::=`
	rhs:
		patterns: [
			{include: "#string"}
			{include: "#character"}
			{include: "#semicolon"}
			{include: "#misc-keywords"}
			{include: "#misc-operators"}
			{include: "#reference"}
			{include: "#list"}
			{include: "source.bnf#operators"}
			{include: "#number"}
			{include: "#comments"}
			{include: "#braces"}
		]


	# Reference to a named definition
	reference:
		name: "entity.name.tag.reference.lbnf"
		match: "(?!\\d)\\w+"


	# Terminator character
	semicolon:
		name: "punctuation.terminator.statement.semicolon.lbnf"
		match: ";"


	# "Double-quoted string"
	string:
		name:  "string.quoted.double.lbnf"
		begin: '"'
		end:   '"'
		beginCaptures: 0: name: "punctuation.definition.string.begin.lbnf"
		endCaptures:   0: name: "punctuation.definition.string.end.lbnf"
		patterns: [{
			name: "constant.character.escape.quote.lbnf"
			match: '\\\\"'
		}]
