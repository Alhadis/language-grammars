name: "Extended Backus-Naur Form"
scopeName: "source.ebnf"
fileTypes: ["ebnf"]
patterns: [include: "#main"]
firstLineMatch: """(?x)

	# Emacs modeline
	-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		(?i:ebnf)
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-
	
	|
		
	# Vim modeline
	(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
	(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
	(?:filetype|ft|syntax)[ \\t]*=
		(?i:ebnf)
	(?=$|\\s|:)
"""

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#semicolon"}
			{include: "#lhs"}
			{include: "#rhs"}
			{include: "#special"}
		]
	
	
	# Punctuation that could mean anything
	brackets:
		patterns: [
			{match: "\\[", name: "punctuation.definition.square.bracket.begin.ebnf"}
			{match: "\\]", name: "punctuation.definition.square.bracket.end.ebnf"}
			{match: "{",   name: "punctuation.definition.curly.bracket.begin.ebnf"}
			{match: "}",   name: "punctuation.definition.curly.bracket.end.ebnf"}
			{match: "\\(", name: "punctuation.definition.round.bracket.begin.ebnf"}
			{match: "\\)", name: "punctuation.definition.round.bracket.end.ebnf"}
		]
	
	
	# Block comments
	comment:
		patterns: [{
			# (* ISO/IEC 14977 syntax *)
			name:  "comment.block.iso14977.ebnf"
			begin: "\\(\\*"
			end:   "\\*\\)"
			beginCaptures: 0: name: "punctuation.definition.comment.begin.ebnf"
			endCaptures:   0: name: "punctuation.definition.comment.end.ebnf"
		},{
			# /* W3C/C-like syntax */
			name:  "comment.block.w3c.ebnf"
			begin: "^[ \\t]*((/\\*))"
			end:   "\\*/"
			beginCaptures:
				1: name: "comment.block.w3c.ebnf"
				2: name: "punctuation.definition.comment.begin.ebnf"
			endCaptures:
				0: name: "punctuation.definition.comment.end.ebnf"
		}]
		

	
	# Left-hand side
	#
	# NOTE:
	# - “Assignment operator” basically refers to `::=`, `:=``, or `=`.
	# - Dashes are tolerated in rule-names, irrespective of ISO/IEC 14977 conformance.
	# - We include invalid patterns due to improvised EBNF notations are so common.
	#   However, we scope them as `.non-standard` rather than  `.invalid` or `.illegal`,
	#   due to the distractions of error highlighting.
	lhs:
		patterns: [{
			# Valid identifier according to ISO/IEC 14977
			name: "meta.lhs.ebnf"
			match: """(?x)
				(?:    \\s++
				|      ^|\\G
				| (?=  ^|\\G    )
				| (?<= ;|\\*\\) )
				)
				
				# Exclude leading whitespace
				\\s*
				
				([A-Za-z][A-Za-z0-9_-]*+)
			"""
			captures:
				1: name: "entity.name.rule.identifier.ebnf"
		},{
			# Identifier containing ostensibly illegal characters
			name: "meta.lhs.non-standard.ebnf"
			contentName: "entity.name.rule.identifier.non-standard.ebnf"
			patterns: [include: "#comment"]
			begin: """(?x)
				(?:    \\s++
				|      ^|\\G
				| (?=  ^|\\G  )
				| (?<= \\*\\) )
				)
				
				# Exclude leading whitespace
				\\s*
				
				# Check for at least one “invalid” character
				(?=
					# Starts with a digit
					[0-9]
					|
					
					# Contains at least one non-“word” character
					[A-Za-z0-9_-]*  # Skip any legal characters
					(?: [^:;=()]    # Don't swallow symbols for comments, terminators, or assignments
					|   \\((?!\\*)  # Permit open brackets if they don't introduce a comment
					)
				)
			"""
			end: """(?x)
				# Exclude trailing whitespace
				\\s*
				
				# Stop before an...
				(?= :*=      # Assignment operator separating `#lhs` from `#rhs`
				|   ;        # Unexpected terminator
				|   \\(\\*   # Embedded comment
				)
			"""
		}, include: "#comment"]
	
	
	# Right-hand side
	rhs:
		name:  "meta.rhs.ebnf"
		begin: "(::=)|(:=)|(=)"
		end:   "(?=;|^\\s*(?:<?[A-Za-z][A-Za-z0-9_-]*>?\\s*)?:*=)"
		beginCaptures:
			1: name: "keyword.operator.assignment.non-standard.double-colon.ebnf"
			2: name: "keyword.operator.assignment.non-standard.single-colon.ebnf"
			3: name: "keyword.operator.assignment.ebnf"
		patterns: [include: "#rhs-innards"]
	
	
	# Stuff included inside a rule's right-hand side
	"rhs-innards":
		patterns: [{
			# Concatenation (comma)
			name: "punctuation.delimiter.comma.ebnf"
			match: ","
		},{
			# Alternation (pipe)
			name: "keyword.operator.logical.or.alternation.pipe.ebnf"
			match: "\\|"
		},{
			# Exception (dash)
			name: "keyword.operator.logical.minus.hyphen.exception.ebnf"
			match: "-"
		},{
			# Repetition (asterisk)
			name: "keyword.operator.logical.repetition.asterisk.star.ebnf"
			match: "\\*"
		},{
			# ? SPECIAL OMFG ?
			include: "#special"
		},{
			# "Terminals"
			name:  "string.quoted.double.ebnf"
			begin: '"'
			end:   '"(?!")|(?=^\\s*+\\S+?\\s+::{0,2}=\\s|\\s+\\|)'
			beginCaptures: 0: name: "punctuation.definition.string.begin.ebnf"
			endCaptures:   0: name: "punctuation.definition.string.end.ebnf"
		},{
			# 'Terminals'
			name: "string.quoted.single.ebnf"
			begin: "'"
			end:   "'(?!')|(?=^\\s*+\\S+?\\s+::{0,2}=\\s|\\s+\\|)"
			beginCaptures: 0: name: "punctuation.definition.string.begin.ebnf"
			endCaptures:   0: name: "punctuation.definition.string.end.ebnf"
		},{
			include: "#brackets"
		},{
			include: "#comment"
		},{
			# Rule reference
			name: "variable.parameter.argument.identifier.reference.ebnf"
			match: "\\b(?<!-)[A-Za-z][A-Za-z0-9_-]*"
		},{
			# (Non-standard) Negated pattern: !
			name: "keyword.operator.logical.not.negation.non-standard.ebnf"
			match: "!"
		},{
			# (Non-standard) Quantifiers: *, ?, +
			include: "source.lex.regexp#quantifier"
		}]
	
	
	# Rule terminator
	semicolon:
		name: "punctuation.terminator.statement.ebnf"
		match: ";"


	# ? Special stuff ?
	special:
		name:  "meta.pragma.directive.special.iso14977.ebnf"
		match: "(?<=\\s|^)(\\?)(.+?)(?<=\\s)(\\?)(?=[,;]?(?:$|\\s))"
		captures:
			1: name: "keyword.operator.pragma.begin.ebnf"
			2: name: "support.constant.language.pragma.ebnf"
			3: name: "keyword.operator.pragma.end.ebnf"
