name: "Lex"
scopeName: "source.lex"
fileTypes: ["l", "lex"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#jlex"}
			{include: "#definitions"}
			{include: "#rules"}
			{include: "source.cpp"}
		]
	
	# Multi-line comment regions
	comment:
		name:  "comment.block.lex"
		begin: "/\\*"
		end:   "\\*/"
		beginCaptures: 0: name: "punctuation.definition.begin.comment.lex"
		endCaptures:   0: name: "punctuation.definition.end.comment.lex"


	# Initial grammar section
	definitions:
		name:  "meta.definitions.lex"
		begin: "\\A(?!\\s*%%)"
		end:   "^(?=\\s*(?:%%|import\\s+java\\.))"
		patterns: [
			{include: "#comment"}
			{include: "#option"}
			{include: "#passthrough"}
			{include: "#definition"}
		]
	
	# Individual definition
	definition:
		name:  "meta.definition.lex"
		begin: "^\\s*([A-Za-z_][A-Za-z0-9_-]*)"
		end:   "$"
		beginCaptures:
			1: name: "entity.name.definition.lex"
		patterns: [{
			name:  "meta.pattern.lex"
			match: "(?<=\\s)\\S.*"
			captures:
				0: patterns: [include: "source.lex.regexp"]
		}]
	
	
	# Hack for JLex grammars (Java-flavoured Lex)
	jlex:
		name:  "meta.jlex.lex"
		begin: "^(?=\\s*import\\s+java\\.)"
		end:   "(?=A)|B" # Swallow whole document
		patterns: [include: "source.jlex"]
	
	
	# `%option' directive
	option:
		name:  "meta.options.lex"
		begin: "^\\s*((%)option)"
		end:   "(?=$)"
		captures:
			1: name: "keyword.control.directive.option.lex"
			2: name: "punctuation.definition.directive.lex"
		patterns: [
			{include: "#comment"}
			{match: "\\S+", name: "constant.language.option.lex"}
		]
	
	
	# Chunk of text copied verbatim to output
	passthrough:
		name:  "meta.code-chunk.lex"
		begin: "^%{"
		end:   "^%}"
		beginCaptures: 0: name: "punctuation.section.embedded.begin.lex"
		endCaptures:   0: name: "punctuation.section.embedded.end.lex"
		patterns: [include: "source.cpp"]
	
	
	# Second grammar section
	rules:
		begin: "^\\s*(%%)\\s*$\\s*"
		end:   "^\\s*(%%)\\s*$\\s*"
		beginCaptures: 1: name: "keyword.control.section.begin.lex"
		endCaptures:   1: name: "keyword.control.section.end.lex"
		patterns: [
			{include: "#passthrough"}
			{include: "#rule.pattern"}
			{include: "#rule.action"}
		]

	"rule.pattern":
		name:  "meta.pattern.lex"
		begin: "(?<=^|\\n)(?=\\S)"
		end:   "(?=\\s|$)"
		patterns: [include: "source.lex.regexp"]
	
	# Wrapper for embedded C/C++ blocks.
	# Patterns are handled carefully to avoid runaway issues.
	"rule.action":
		name:  "meta.action.lex"
		begin: "(?<!^)(?=\\S)"
		end:   "(?=\\s*$|^)"
		patterns: [{
			# { Block }
			begin: "(?={)"
			end:   "(?<=})"
			patterns: [include: "source.cpp"]
		},{
			# Plain C string (one-line only)
			match: "([^{\\s][^{]*?)\\s*$"
			captures:
				1: patterns: [include: "source.cpp"]
		}]


	# Arbitrary code tacked onto the end of the grammar
	"user-code":
		name:  "meta.user-code.lex"
		begin: "(?<=^%%|\\s%%)"
		end:   "(?=A)B" # Remainder of document
		contentName: "source.embedded.cpp"
		patterns: [include: "source.cpp"]
