# Source: https://www.cs.princeton.edu/~appel/modern/java/JLex/current/manual.html
name: "JLex"
scopeName: "source.jlex"
fileTypes: ["jlex", "jflex"]
patterns: [include: "#main"]
firstLineMatch: """(?ix)

	# Emacs modeline
	-\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
		jf?lex
	(?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
	
	|
		
	# Vim modeline
	(?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s* set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
		jf?lex
	(?=\\s|:|$)
"""

repository:
	main:
		patterns: [
			{include: "#user-code"}
			{include: "#comments"}
			{include: "#options"}
			{include: "#rules"}
		]
	
	
	comments:
		patterns: [{
			# Line comment
			name:  "comment.line.double-slash.jlex"
			begin: "//"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.jlex"
		},{
			# Block comment
			name: "comment.block.jlex"
			begin: "/\\*"
			end:   "\\*/"
			beginCaptures: 0: name: "punctuation.definition.begin.comment.jlex"
			endCaptures:   0: name: "punctuation.definition.end.comment.jlex"
			patterns: [include: "#comment"]
		}]


	# Block of actual Java source
	"java-code":
		patterns: [
			# Character preceded by a backslash
			name: "constant.character.escape.backslash.jlex"
			match: "\\\\."
			
			{include: "source.java"}
		]

	# Bracketed varient of the above
	"java-code-block":
		begin: "{"
		end:   "}"
		beginCaptures: 0: name: "punctuation.definition.curly.bracket.begin.jlex"
		endCaptures:   0: name: "punctuation.definition.curly.bracket.end.jlex"
		patterns: [include: "#java-code"]
		
	
	"state-list":
		patterns: [include: "#comment", {
			# Lexical state
			name:  "constant.other.lexical-state.jlex"
			match: "[A-Za-z_][A-Za-z_0-9]*"
		},{
			# Comma
			name: "punctuation.delimiter.comma.jlex"
			match: ","
		}]
	
	
	# Part I: User-defined code, included verbatim
	"user-code":
		name:  "meta.user-code.jlex"
		begin: "\\A"
		end:   "^(?=\\s*%%)"
		patterns: [include: "#java-code"]
	
	
	# Part II: Options, macros and declarations
	options:
		name:  "name.options.jlex"
		begin: "^\\s*(%%)\\s*$\\s*"
		end:   "^\\s*(%%)\\s*$\\s*"
		beginCaptures: 1: name: "keyword.control.section.begin.jlex"
		endCaptures:   1: name: "keyword.control.section.end.jlex"
		patterns: [{
			# Passthrough
			name:  "meta.code-chunk.jlex"
			begin: "^\\s*%{"
			end:   "^\\s*%}"
			beginCaptures: 0: name: "punctuation.section.embedded.begin.jlex"
			endCaptures:   0: name: "punctuation.section.embedded.end.jlex"
			patterns: [include: "#java-code"]
		},{
			# %class name
			match: "((%)(?:class|extends|implements|extends|cupsym))\\s+(\\S.*)"
			captures:
				1: name: "keyword.control.directive.jlex"
				2: name: "punctuation.definition.directive.jlex"
				3: name: "storage.type.class.var.jlex"
		},{
			# %include foo.bar
			match: "((%)include)\\s*(\\S.*)(?=$|//)"
			captures:
				1: name: "keyword.control.directive.jlex"
				2: name: "punctuation.definition.directive.jlex"
				3: patterns: [{
					match: "[^\\s.]+"
					name: "storage.modifier.import.java"
				},{
					match: "\\."
					name: "punctuation.separator.java"
				}]
		},{
			# %state state[0][, state[1], state[2], â€¦]
			name:  "meta.state-declarations.jlex"
			begin: "(%)state(?=\\s)(?!$)"
			end:   "(?=$|/\\*)"
			beginCaptures:
				0: name: "keyword.control.directive.jlex"
				1: name: "punctuation.definition.directive.jlex"
			patterns: [include: "#state-list"]
		},{
			# Code blocks of the form `%foo{ ... %foo}'
			name:  "meta.code-block.directive.$3.jlex"
			begin: "^\\s*((%)(initthrow|init|eofthrow|eofval|eof))({)"
			end:   "^\\s*((%)\\3)(})"
			beginCaptures:
				1: name: "keyword.control.directive.jlex"
				2: name: "punctuation.definition.directive.jlex"
				4: name: "punctuation.definition.curly.bracket.begin.jlex"
			endCaptures:
				1: name: "keyword.control.directive.jlex"
				2: name: "punctuation.definition.directive.jlex"
				3: name: "punctuation.definition.curly.bracket.end.jlex"
			patterns: [include: "#java-code"]
		},{
			# Other options/directives
			begin: "^\\s*((%)\\w+)(\\s+\\S.*)?"
			end:   "(?=$)"
			beginCaptures:
				1: name: "keyword.control.directive.jlex"
				2: name: "punctuation.definition.directive.jlex"
				3: patterns: [
					{include: "#comments"}
					{match: "\\S+", name: "constant.language.other.lex"}
				]
		},{
			# Macro
			match: "^\\s*([^\\s=]+)\\s*(=)(\\s*\\S.*)$"
			captures:
				1: name: "entity.macro.name.jlex"
				2: name: "keyword.operator.assignment.jlex"
				3: name: "meta.macro.definition.jlex", patterns: [{
					include: "source.lex.regexp"
				}]
		}, include: "#comments"]
	
	
	# Part III: Lexical rules
	rules:
		patterns: [{
			include: "#comments"
		},{
			# <STATE,CONDITION>
			name:  "meta.state-condition.jlex"
			begin: "^\\s*(<)"
			end:   ">"
			beginCaptures: 1: name: "punctuation.definition.angle.bracket.begin.jlex"
			endCaptures:   0: name: "punctuation.definition.angle.bracket.end.jlex"
			patterns: [include: "#state-list"]
		},{
			# State group
			name:  "meta.state-group.jlex"
			begin: "(?<=>)\\s*({)"
			end:   "}"
			beginCaptures: 1: name: "punctuation.section.group.curly.bracket.begin.jlex"
			endCaptures:   0: name: "punctuation.section.group.curly.bracket.end.jlex"
			patterns: [
				{include: "#java-code"}
				{include: "#rules"}
			]
		},{
			# Hit-and-miss pattern for the pattern/string before a Java block
			name:  "meta.rule-action.jlex"
			begin: "(?:^|\\G|(?=^|\\G))\\s*([^\\s{<].*?)\\s*({)"
			end:   "}"
			beginCaptures:
				1: patterns: [include: "source.lex.regexp"]
				2: name: "punctuation.section.group.curly.bracket.begin.jlex"
			endCaptures:
				0: name: "punctuation.section.group.curly.bracket.end.jlex"
			patterns: [include: "#java-code"]
		},{
			include: "source.lex.regexp"
		},{
			name:  "meta.rule.jlex"
			begin: "^([^{]*[^\\s{][^{]*)({\\w+}\\s*)?({)"
			end:   "}"
			beginCaptures:
				1: patterns: [include: "source.lex.regexp"]
				2: patterns: [include: "source.lex.regexp"]
				3: name: "punctuation.definition.curly.bracket.begin.jlex"
			endCaptures:
				0: name: "punctuation.definition.curly.bracket.begin.jlex"
			patterns: [include: "source.java"]
		}, include: "#comments"]
