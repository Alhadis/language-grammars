name: "GOLD Grammar"
scopeName: "source.goldgrm"
fileTypes: ["grm"]
firstLineMatch: """(?x)

	# Emacs modeline
	-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		(?i:grm|gold-?(?:grammar|grm|parser))
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-
	
	|
		
	# Vim modeline
	(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
	(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
	(?:filetype|ft|syntax)[ \\t]*=
		(?i:grm)
	(?=$|\\s|:)
"""
patterns: [include: "#main"]
repository:
	main:
		patterns: [
			{include: "#comments"}
			{include: "#production"}
			
			# Tokens unmatched by ‚Äò#production‚Äô
			{include: "#setName"}
			{include: "#setNameInnards"}
			{include: "#nonterminal"}
			{include: "#terminal"}
		]


	# Logical OR: `either-this | or-that`
	alternation:
		name: "keyword.operator.logical.or.alternation.goldgrm"
		match: "\\|"


	# Terminal attributes list: `‚Ä¶ @= { Name = Value }`
	attributes:
		begin: "(?<=@=)\\G"
		end:   "(?<=})"
		applyEndPatternLast: yes
		patterns: [{
			# Skip past newlines and sandwiched junk
			begin: "\\G"
			end:   "(?={)"
			patterns: [include: "#comments"]
		},{
			# Bracketed region
			name:  "meta.attributes.goldgrm"
			begin: "(?!\\G){"
			end:   "}"
			beginCaptures: 0: name: "punctuation.scope.section.begin.goldgrm"
			endCaptures:   0: name: "punctuation.scope.section.end.goldgrm"
			patterns: [
				{include: "#attribute"}
				{include: "#comma"}
			]
		}]


	# `Name = value` pair
	attribute:
		patterns: [{
			# `Name` ‚Ä¶ =
			begin: "(?<=[,\\s{]|^|\\G)[ \\t]*([-.\\w]+)"
			end:   "=|(?=})"
			beginCaptures: 1: name: "entity.other.attribute-name.goldgrm"
			endCaptures:   0: name: "keyword.operator.assignment.key-value.attribute.goldgrm"
			patterns: [include: "#comments"]
		},{
			# = ‚Ä¶ `Value`
			begin: "(?!\\G)(?<==)"
			end:   "(?=}|,)"
			patterns: [include: "#rhsInnards"]
		}]


	# Predefined character sets: http://goldparser.org/doc/grammars/predefined-sets.htm
	charsets:
		patterns: [{
			name: "support.constant.character-set.${1:/[[:^alnum:]]+/-/g:/downcase}.goldgrm"
			match: """(?x) (?<=^|\\G|[{\\s])
				# Common character sets
				( Number                # 30-39
				| Digit                 # 30-39
				| Letter\\ Extended     # C0-D6, D8-F6, F8-FF
				| Letter                # 41-5A, 61-7A
				| AlphaNumeric          # 30-39, 41-5A, 61-7A
				| Printable\\ Extended  # A1-FF
				| Printable             # 20-7E, A0
				| Whitespace            # 09-0D, 20, A0

				# ‚ÄúUseful‚Äù character sets
				| All \\ (Latin|Letters|Newline|Printable|Space|Whitespace)

				# ‚ÄúMiscellaneous‚Äù character sets
				| ANSI (?:\\ (?:Mapped|Printable))?
				| All     \\ Valid
				| Control \\ Codes
				| Euro    \\ Sign
				| Formatting

				# Unicode blocks
				| Alphabetic\\ Presentation\\ Forms
				| Arabic\\ Presentation\\ Forms-[AB]
				| Arabic\\ Supplement
				| Arabic
				| Armenian
				| Arrows
				| Balinese
				| Bamum
				| Basic\\ Latin
				| Bengali
				| Block\\ Elements
				| Box\\ Drawing
				| Braille\\ Patterns
				| Buginese
				| Buhid
				| CJK\\ Compatibility\\ Forms
				| CJK\\ Compatibility\\ Ideographs
				| CJK\\ Compatibility
				| CJK\\ Radicals\\ Supplement
				| CJK\\ Strokes
				| CJK\\ Symbols\\ and\\ Punctuation
				| CJK\\ Unified\\ Ideographs\\ Extension\\ A
				| CJK\\ Unified\\ Ideographs
				| Cham
				| Cherokee
				| Combining\\ Diacritical\\ Marks(?:\\ Supplement|\\ for\\ Symbols)?
				| Combining\\ Half\\ Marks
				| Common\\ Indic\\ Number\\ Forms
				| Control\\ Pictures
				| Coptic
				| Currency\\ Symbols
				| Cyrillic\\ Extended-[AB]
				| Cyrillic\\ Supplement
				| Cyrillic
				| Devanagari\\ Extended
				| Devanagari
				| Dingbats
				| Enclosed\\ Alphanumerics
				| Enclosed\\ CJK\\ Letters\\ and\\ Months
				| Ethiopic\\ Extended
				| Ethiopic\\ Supplement
				| Ethiopic
				| General\\ Punctuation
				| Geometric\\ Shapes
				| Georgian\\ Supplement
				| Georgian
				| Glagolitic
				| Greek\\ Extended
				| Greek\\ and\\ Coptic
				| Gujarati
				| Gurmukhi
				| Halfwidth\\ and\\ Fullwidth\\ Forms
				| Hangul\\ Compatibility\\ Jamo
				| Hangul\\ Jamo(?:\\ Extended-[AB])?
				| Hangul\\ Syllables
				| Hanunoo
				| Hebrew
				| Hiragana
				| IPA\\ Extensions
				| Ideographic\\ Description\\ Characters
				| Javanese
				| Kanbun
				| Kangxi\\ Radicals
				| Kannada
				| Katakana\\ Phonetic\\ Extensions
				| Katakana
				| Kayah\\ Li
				| Khmer\\ Symbols
				| Khmer
				| Lao
				| Latin-1\\ Supplement
				| Latin\\ Extended(?:-[ABCD]|\\ Additional)
				| Lepcha
				| Letterlike\\ Symbols
				| Limbu
				| Lisu
				| Malayalam
				| Mathematical\\ Operators
				| Meetei\\ Mayek
				| Miscellaneous \\ (?:Mathematical\\ Symbols-[AB]|Symbols(?:\\ and\\ Arrows)?|Technical)
				| Modifier\\ Tone\\ Letters
				| Mongolian
				| Myanmar\\ Extended-A
				| Myanmar
				| NKo
				| New\\ Tai\\ Lue
				| Number\\ Forms
				| Ogham
				| Ol\\ Chiki
				| Optical\\ Character\\ Recognition
				| Oriya
				| Phags-pa
				| Phonetic\\ Extensions\\ Supplement
				| Phonetic\\ Extensions
				| Private\\ Use\\ Area
				| Rejang
				| Runic
				| Samaritan
				| Saurashtra
				| Sinhala
				| Small\\ Form\\ Variants
				| Spacing\\ Modifier\\ Letters
				| Sundanese
				| Superscripts\\ and\\ Subscripts
				| Supplemental\\ Arrows-[AB]
				| Supplemental\\ Mathematical\\ Operators
				| Supplemental\\ Punctuation
				| Syloti\\ Nagri
				| Syriac
				| Tagalog
				| Tagbanwa
				| Tai\\ (?:Le|Tham|Viet)
				| Tamil
				| Telugu
				| Thaana
				| Thai
				| Tibetan
				| Tifinagh
				| (?:Bopomofo|Unified\\ Canadian\\ Aboriginal\\ Syllabics)(?:\\ Extended)?
				| Vai
				| Variation\\ Selectors
				| Vedic\\ Extensions
				| Vertical\\ Forms
				| Yi\\ Radicals
				| Yi\\ Syllables
				| Yijing\\ Hexagram\\ Symbols
				) (?=$|\\s|})
			"""
		}]


	# Character literals specified by codepoint
	codepoint:
		patterns: [
			{include: "#codepointDec"}
			{include: "#codepointHex"}
		]

	# Decimal codepoint: #ùëÅ (#1 .. #55295, #56320 .. #65519)
	codepointDec:
		name:  "constant.character.entity.codepoint.decimal.dec.goldgrm"
		match: "(#)[0-9]+"
		captures:
			1: name: "punctuation.definition.entity.goldgrm"

	# Hexadecimal codepoint: &ùêª (&1 .. &D7FF, &DC00 .. &FFEF)
	codepointHex:
		name: "constant.character.entity.codepoint.hexadecimal.hex.goldgrm"
		match: "(&)[0-9A-Fa-f]+"
		captures:
			1: name: "punctuation.definition.entity.goldgrm"


	# Attribute separators
	comma:
		name:  "punctuation.separator.delimiter.comma.goldgrm"
		match: ","


	# Comments
	comments:
		patterns: [
			{include: "#commentBlock"}
			{include: "#commentLine"}
		]

	# ! Line comment
	commentLine:
		name:  "comment.line.bang.exclamation-mark.goldgrm"
		begin: "!"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.goldgrm"

	# !* Block comment *!
	commentBlock:
		name:  "comment.block.goldgrm"
		begin: "!\\*"
		end:   "\\*!"
		beginCaptures: 0: name: "punctuation.definition.comment.begin.goldgrm"
		endCaptures:   0: name: "punctuation.definition.comment.end.goldgrm"
		patterns: [include: "#commentBlock"]


	# Character constants
	constants:
		match: """(?x)
			(?<=^|\\G|[{\\s])
			( (HT)      # Horizontal tab
			| (LF)      # Line feed
			| (VT)      # Vertical tab. Rarely used.
			| (FF)      # Form feed. Also known as ‚ÄúNew Page‚Äù
			| (CR)      # Carriage return
			| (Space)   # Space
			| (NBSP)    # Non-breaking space
			| (LS)      # Line separator
			| (PS)      # Paragraph separator
			) (?=$|\\s|})
		"""
		captures:
			1: name: "constant.character.whitespace.horizontal-tab.goldgrm"
			2: name: "constant.character.whitespace.line-feed.goldgrm"
			3: name: "constant.character.whitespace.vertical-tab.goldgrm"
			4: name: "constant.character.whitespace.form-feed.goldgrm"
			5: name: "constant.character.whitespace.carriage-return.goldgrm"
			6: name: "constant.character.whitespace.space.goldgrm"
			7: name: "constant.character.whitespace.non-breaking-space.goldgrm"
			8: name: "constant.character.whitespace.line-separator.goldgrm"
			9: name: "constant.character.whitespace.paragraph-separator.goldgrm"


	# Left-hand side of a production rule
	lhs:
		name:  "meta.lhs.goldgrm"
		begin: "\\G"
		end:   '(::=)|(@=)|(=)'
		endCaptures:
			1: name: "keyword.operator.assignment.rule.goldgrm"
			2: name: "keyword.operator.assignment.attribute.goldgrm"
			3: name: "keyword.operator.assignment.property.goldgrm"
		patterns: [{
			begin: "\\G"
			end:   "(?!\\G)"
			applyEndPatternLast: yes
			patterns: [
				{include: "#stringDouble"}
				{include: "#setName"}
				{include: "#nonterminal"}
				{include: "#terminal"}
			]
		}]


	# Non-terminal
	nonterminal:
		name:  "meta.nonterminal.goldgrm"
		begin: "<"
		end:   ">"
		beginCaptures: 0: name: "punctuation.definition.tag.nonterminal.begin.goldgrm"
		endCaptures:   0: name: "punctuation.definition.tag.nonterminal.end.goldgrm"
		contentName: "entity.name.tag.nonterminal.goldgrm"


	# Dyadic combinator: + -
	operators:
		patterns: [
			{match: "\\+", name: "keyword.operator.combinator.add.goldgrm"}
			{match: "-",   name: "keyword.operator.combinator.remove.goldgrm"}
		]


	# Property declaration ("key" = "value") or production rule (<Rule> ::= ‚Ä¶)
	production:
		name:  "meta.production.declaration.goldgrm"
		begin: """(?x)
			(?= < [^<>]*  >          \\s* :* =
			|   { [^{}]*? }          \\s* @? =
			|   " [^"]*   "          \\s* @? =
			|   (?!\\s) [-.\\s\\w]+? \\s* @? =
			)
		"""
		end: '(?!\\G)'
		applyEndPatternLast: yes
		patterns: [
			{include: "#lhs"}
			{include: "#rhs"}
		]


	# Quantifiers: + ? *
	quantifiers:
		patterns: [
			{match: "\\*", name: "keyword.operator.quantifier.repetition.kleene-closure.goldgrm"}
			{match: "\\?", name: "keyword.operator.quantifier.repitition.optional.goldgrm"}
		]


	# Range separator: 1..ùëÅ
	range:
		name:  "keyword.operator.range.splat.spread.goldgrm"
		match: "(?<!\\[)\\.\\.(?!\\])"


	# Right-hand side of a production rule assignment
	rhs:
		name: "meta.rhs.goldgrm"
		begin: '(?<==)'
		end: """(?x) ^
			(?=\\s*[^!\\s])
			(?=
				\\s*
				(?: " [^"]* "
				|   < [^<>]* >
				|   { [^{}]* }
				|   (?!\\s)[^{}<>\\[(|)\\]*+?!:="']+?
				) \\s* :* =
			)"""
		patterns: [
			{include: "#attributes"}
			{include: "#rhsInnards"}
		]


	# Stuff appearing on the right-hand side of an equals-sign or `::=` operator
	rhsInnards:
		patterns: [
			{include: "#comments"}
			{include: "#subexpression"}
			{include: "#operators"}
			{include: "#quantifiers"}
			{include: "#alternation"}
			{include: "#setName"}
			{include: "#nonterminal"}
			{include: "#string"}
			{include: "#set"}
			{include: "#terminal"}
		]


	# Character set: [‚Ä¶]
	set:
		name:  "string.regexp.character-class.goldgrm"
		begin: "\\["
		end:   "\\]"
		beginCaptures: 0: name: "punctuation.definition.character-class.set.begin.goldgrm"
		endCaptures:   0: name: "punctuation.definition.character-class.set.end.goldgrm"
		patterns: [
			# Character range: A..Z
			{include: "#range"}

			# Single-quoted character(s) (permits closing brackets and apostrophes in sets)
			{include: "#stringSingle"}

			# Unquoted character that isn't a square-bracket
			name:  "constant.character.single.character-class.goldgrm"
			match: "[^\\[\\]']"
		]


	# Reference to a set declaration: {Name}
	setName:
		name:  "meta.set-name.goldgrm"
		begin: "{"
		end:   "}"
		beginCaptures: 0: name: "punctuation.definition.set.bracket.curly.begin.goldgrm"
		endCaptures:   0: name: "punctuation.definition.set.bracket.curly.end.goldgrm"
		contentName: "entity.name.set.goldgrm"
		patterns: [include: "#setNameInnards"]

	# Stuff matched inside {SetNames} and friends
	setNameInnards:
		patterns: [
			{include: "#constants"}
			{include: "#charsets"}
			{include: "#codepoint"}
			{include: "#range"}
		]


	# Quoted string literals
	string:
		patterns: [
			{include: "#stringDouble"}
			{include: "#stringSingle"}
		]

	# "Double-quoted" string
	stringDouble:
		name:  "string.quoted.double.goldgrm"
		begin: '"'
		end:   '"'
		beginCaptures: 0: name: "punctuation.definition.string.begin.goldgrm"
		endCaptures:   0: name: "punctuation.definition.string.end.goldgrm"

	# 'Single-quoted' string
	stringSingle:
		patterns: [{
			# Literal single-quote: ''
			name:  "constant.character.escape.quote.goldgrm"
			match: "''"
		},{
			name:  "string.quoted.single.goldgrm"
			begin: "'"
			end:   "'"
			beginCaptures: 0: name: "punctuation.definition.string.begin.goldgrm"
			endCaptures:   0: name: "punctuation.definition.string.end.goldgrm"
		}]


	# Parenthesised expression
	subexpression:
		name:  "meta.expression.group.goldgrm"
		begin: "\\("
		end:   "\\)"
		beginCaptures: 0: name: "punctuation.section.expression.begin.goldgrm"
		endCaptures:   0: name: "punctuation.section.expression.end.goldgrm"
		patterns: [include: "#rhsInnards"]


	# Unquoted identifier: `Terminal = ‚Ä¶`
	terminal:
		patterns: [{
			# Special group syntax: http://goldparser.org/doc/grammars/define-groups.htm
			name:  "meta.group-name.goldgrm"
			match: "([-.\\w]+)\\s+([-.\\w]+)(?=\\s*(?:$|@?=|::=|!))"
			captures:
				1: name: "entity.name.container.goldgrm"
				2: name: "storage.type.role.${2:/downcase}.goldgrm"
		},{
			name:  "entity.name.terminal.goldgrm"
			match: "[-.\\w]+(?:\\s+[-.\\w]+)*+"
		}]
