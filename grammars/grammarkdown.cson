name: "Grammarkdown"
scopeName: "text.grammarkdown"
fileTypes: ["grammar"]
firstLineMatch: """(?x)
	# Hashbang
	^\\#!.*(?:\\s|\\/|(?<=!)\\b)
		grammarkdown
	(?:$|\\s)
	
	|
	
	# Emacs modeline
	-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
		(?i:grammarkdown)
	(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-
	
	|
	
	# Vim modeline
	(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
	(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
	(?:filetype|ft|syntax)[ \\t]*=
		(?i:grammarkdown)
	(?=$|\\s|:)
"""
patterns: [include: "#main"]
repository:
	main:
		patterns: [
			{include: "#comments"}
			{include: "#meta"}
			{include: "#production"}
		]


	# Zero-width test, enclosed by square brackets (not to be confused with “#parameters”)
	assertion:
		name:  "meta.assertion.grammarkdown"
		begin: "\\["
		end:   "\\]"
		beginCaptures: 0: name: "punctuation.definition.assertion.begin.grammarkdown"
		endCaptures:   0: name: "punctuation.definition.assertion.end.grammarkdown"
		patterns: [
			{include: "#assertion-empty"}
			{include: "#assertion-lookahead"}
			{include: "#assertion-no-symbol"}
			{include: "#assertion-lexical-goal"}
			{include: "#assertion-parameter"}
			{include: "#assertion-prose"}
		]


	# [empty]
	"assertion-empty":
		match: "\\G\\s*(empty)(?:\\s+((?=\\S)[^\\]]*))?"
		captures:
			1: name: "keyword.operator.assertion.empty.grammarkdown"
			2: name: "invalid.illegal.unexpected-junk.grammarkdown"


	# Lookahead assertion, analoguous to (?=…) and (?!…) in regex
	"assertion-lookahead":
		patterns: [{
			# [lookahead == `text`]
			name:  "meta.lookahead-operation.grammarkdown"
			begin: "\\G\\s*(lookahead)\\s*(==|!=|≠)[ \\t]*"
			end:   "(?!\\G)"
			beginCaptures:
				1: name: "keyword.operator.assertion.lookahead.grammarkdown"
				2: name: "keyword.operator.comparison.equality.grammarkdown"
			patterns: [include: "#literal"]
		},{
			# [lookahead <- {`set`, `of`, `strings`}]
			name:  "meta.lookahead-operation.grammarkdown"
			begin: "\\G\\s*(lookahead)\\s*(<-|<!|∈|∉)[ \\t]*"
			end:   "(?!\\G)"
			beginCaptures:
				1: name: "keyword.operator.assertion.lookahead.grammarkdown"
				2: name: "keyword.operator.comparison.equality.grammarkdown"
			patterns: [{
				name:  "meta.string-set.grammarkdown"
				begin: "\\G{"
				end:   "}"
				beginCaptures: 0: name: "punctuation.definition.set.begin.grammarkdown"
				endCaptures:   0: name: "punctuation.definition.set.end.grammarkdown"
				patterns: [
					{include: "#literal"}
					{include: "#comma"}
				]
			}]
		}]


	# Lexical goal assertion. Whatever that is.
	"assertion-lexical-goal":
		begin: "\\G\\s*(lexical\\s+goal)(?=$|\\s)"
		end:   "\\s*(?=$|\\])"
		captures:
			1: name: "keyword.operator.assertion.lexical-goal.grammarkdown"
		patterns: [include: "#ref"]


	# Assert that the following token is *not* the provided symbol
	"assertion-no-symbol":
		begin: "\\G\\s*(no)(?=$|\\s)"
		end:   "((?<=\\s)here)?\\s*(?=$|\\])"
		captures:
			1: name: "keyword.operator.assertion.no-symbol-here.grammarkdown"
		patterns: [include: "#ref"]


	# Assert the presence or absence of a production parameter
	"assertion-parameter":
		match: "\\G([+~])\\s*(\\w+)"
		captures:
			1: name: "keyword.operator.parameter-test.grammarkdown"
			2: patterns: [include: "#ref"]


	# Prose assertion, which… allows prose to be used in an assertion
	"assertion-prose":
		name:  "markup.quote.prose.grammarkdown"
		begin: "\\G\\s*(>)[ \\t]*"
		end:   "\\s*(?=\\])"
		beginCaptures:
			1: name: "punctuation.section.quote.grammarkdown"


	# Separator token used in parameter and assertion lists
	comma:
		name: "punctuation.delimiter.comma.grammarkdown"
		match: ","


	# C++-style comments
	comments:
		patterns: [{
			# // Line comment
			name:  "comment.line.double-slash.grammarkdown"
			begin: "//"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.grammarkdown"
		},{
			# /* Block comment */
			name:  "comment.block.grammarkdown"
			begin: "/\\*"
			end:   "\\*/"
			beginCaptures: 0: name: "punctuation.definition.comment.begin.grammarkdown"
			endCaptures:   0: name: "punctuation.definition.comment.end.grammarkdown"
		}]


	# Blacklisted elements of a referenced production
	exclusion:
		name:  "meta.exclusion.grammarkdown"
		begin: "(?:^|\\G|(?<=\\s))(but\\s+not)(?=$|\\s)"
		end:   "(?=\\s*(?:$|/[/*]))"
		beginCaptures:
			1: name: "keyword.operator.logical.negation.negate.not.grammarkdown"
		patterns: [{
			name: "keyword.operator.logical.or.grammarkdown"
			match: "(?<=\\s)or(?=$|\\s)"
		},{
			name: "keyword.operator.selection.one-of.grammarkdown"
			match: "(?<=\\s)one\\s+of(?=$|\\s)"
		}, include: "#production-innards"]


	# Custom permalink name
	"link-id":
		name:  "meta.custom-permalink.grammarkdown"
		match: "(?:^|\\G)\\s*(\\w+)\\s*(\\[[^\\]]*\\])\\s*((#)([-\\w]+))"
		captures:
			1: name: "variable.language.production-reference.grammarkdown"
			2: patterns: [include: "#parameters"]
			3: name: "constant.other.permalink.grammarkdown"
			4: name: "punctuation.definition.permalink.grammarkdown"
			5: name: "constant.other.reference.link.permalink.grammarkdown"


	# Verbatim text: `…`
	literal:
		patterns: [{
			# Literal backtick: ```
			name: "string.quoted.single.verbatim.grammarkdown"
			match: '(`)`(`)'
			captures:
				1: name: "punctuation.definition.string.begin.grammarkdown"
				2: name: "punctuation.definition.string.end.grammarkdown"
		},{
			# Variable-length literal
			name:  "string.quoted.verbatim.grammarkdown"
			begin: "`"
			end:   "`"
			beginCaptures: 0: name: "punctuation.definition.string.begin.grammarkdown"
			endCaptures:   0: name: "punctuation.definition.string.end.grammarkdown"
		}]


	# Meta elements: “@keyword …”
	meta:
		patterns: [{
			# @import "path"
			name:  "meta.import.directive.grammarkdown"
			begin: "^\\s*((@)import)(?=$|\\s)[ \\t]*"
			end:   "(?=\\s*(?:$|/[/*]))"
			beginCaptures:
				1: name: "keyword.control.import.grammarkdown"
				2: name: "punctuation.definition.keyword.grammarkdown"
			patterns: [include: "#meta-string"]
		},{
			# @line 80 "/tmp/es2022.emu"
			name:  "meta.source-line.directive.grammarkdown"
			begin: "^\\s*((@)line)(?=$|\\s)[ \\t]*"
			end:   "(?=\\s*(?:$|/[/*]))"
			beginCaptures:
				1: name: "keyword.control.line.grammarkdown"
				2: name: "punctuation.definition.keyword.grammarkdown"
			patterns: [{
				match: "\\G\\s*(\\d+)"
				captures:
					1: name: "constant.numeric.decimal.integer.line-number.grammarkdown"
			}, include: "#meta-string"]
		},{
			# @define key value
			name:  "meta.define.directive.grammarkdown"
			begin: "^\\s*((@)define)(?=$|\\s)[ \\t]*"
			end:   "(?=\\s*(?:$|/[/*]))"
			beginCaptures:
				1: name: "keyword.control.define.grammarkdown"
				2: name: "punctuation.definition.keyword.grammarkdown"
			patterns: [{
				name: "variable.assignment.setting-name.grammarkdown"
				match: "\\G\\w+"
			}, include: "#meta-value"]
		}]


	# Values matched as part of a “@define …” element
	"meta-value":
		patterns: [{
			# “default” keyword
			name: "constant.language.default.grammarkdown"
			match: "(?:^|\\G|(?<=\\s))default(?=\\s*(?:$|/[/*]))"
		},{
			# Boolean keyword
			name: "constant.language.boolean.$1.grammarkdown"
			match: "(?:^|\\G|(?<=\\s))(true|false)(?=\\s*(?:$|/[/*]))"
		},{
			# Anything else
			name: "string.unquoted.setting-value.grammarkdown"
			match: "(?:^|\\G|(?<=\\s))(?=\\S)(?:[^\\r\\n/]|/(?!/|\\*))++"
		}]


	# Quoted string matched inside a “#meta” line
	"meta-string":
		patterns: [{
			# Double-quoted
			name:  "string.quoted.double.grammarkdown"
			begin: '"'
			end:   '"'
			beginCaptures: 0: name: "punctuation.definition.string.begin.grammarkdown"
			endCaptures:   0: name: "punctuation.definition.string.end.grammarkdown"
		},{
			# Single-quoted
			name:  "string.quoted.single.grammarkdown"
			begin: "'"
			end:   "'"
			beginCaptures: 0: name: "punctuation.definition.string.begin.grammarkdown"
			endCaptures:   0: name: "punctuation.definition.string.end.grammarkdown"
		}]


	# “one of” keyword(s?) followed by tokenised terminals
	"one-of-list":
		name:  "meta.one-of-list.grammarkdown"
		match: "\\G\\s*(one\\s+of)(?=$|\\s)[ \\t]*((?=\\S)(?:[^\\r\\n/]|/(?!/|\\*))++)?"
		captures:
			1: name: "keyword.operator.selection.one-of.grammarkdown"
			2: patterns: [include: "#terminal"]


	# Symbol which marks a preceding symbol as optional
	optional:
		name: "keyword.operator.quantifier.optional.grammarkdown"
		match: "(?<=\\S)\\s*\\?"


	# List of parameters enclosed by square-brackets
	parameters:
		name:  "meta.parameters.list.grammarkdown"
		begin: "\\["
		end:   "\\]"
		beginCaptures: 0: name: "punctuation.definition.list.begin.grammarkdown"
		endCaptures:   0: name: "punctuation.definition.list.end.grammarkdown"
		patterns: [
			{match: "\\w+",    name: "variable.parameter.grammarkdown"}
			{match: "[\\?+~]", name: "keyword.operator.other.grammarkdown"}
			{include: "#comma"}
		]

	# Production rule
	production:
		patterns: [{
			# Indented definition
			name:  "meta.production.indented.grammarkdown"
			begin: "(?:^|\\G)(\\s*)(\\w+)(?:\\s*(\\[[^\\]]*\\]))?\\s*(:{1,3})[ \\t]*(?:(one\\s+of)(?=$|\\s)\\s*)?[ \\t]*$"
			end:   "^(?:(?=\\s*$)|(?!\\1[ \\t]+(?:[^\\s/]|/(?!/|\\*))))"
			beginCaptures:
				2: name: "entity.name.production.grammarkdown", patterns: [include: "#reserved"]
				3: patterns: [include: "#parameters"]
				4: name: "keyword.assignment.rule.grammarkdown"
				5: name: "keyword.operator.selection.one-of.grammarkdown"
			patterns: [
				{include: "#comments"}
				{include: "#one-of-list"}
				{include: "#production-innards"}
			]
		},{
			# Single-line definition
			name:  "meta.production.single-line.grammarkdown"
			begin: "(?:^|\\G)\\s*(\\w+)(?:\\s*(\\[[^\\]]*\\]))?\\s*(:{1,3})[ \\t]*(?:(one\\s+of(?=$|\\s))\\s*)?(?=[^\\s/]|/(?!/|\\*))"
			end:   "(?=\\s*(?:$|/[/*]))"
			beginCaptures:
				1: name: "entity.name.production.grammarkdown", patterns: [include: "#reserved"]
				2: patterns: [include: "#parameters"]
				3: name: "keyword.assignment.rule.grammarkdown"
				4: name: "keyword.operator.selection.one-of.grammarkdown"
			patterns: [
				{include: "#one-of-list"}
				{include: "#production-innards"}
			]
		}]


	# Stuff matched after a colon-separator
	"production-innards":
		patterns: [
			{include: "#prose"}
			{include: "#exclusion"}
			{include: "#unicode-range"}
			{include: "#terminal"}
			{include: "#optional"}
			{include: "#link-id"}
			{include: "#ref"}
		]


	# Freeform text: “> Some long-winded description”
	prose:
		name:  "markup.quote.prose.grammarkdown"
		begin: "(?:^|\\G)\\s*(>)[ \\t]*"
		end:   "(?=\\s*(?:$|/[/*]))"
		beginCaptures:
			1: name: "punctuation.section.quote.grammarkdown"


	# Reference to another production rule
	ref:
		name: "variable.reference.grammarkdown"
		match: "\\w+"
		captures:
			0: patterns: [include: "#reserved"]


	# Reserved keywords used within an identifer
	reserved:
		name: "invalid.illegal.reserved-keyword.grammarkdown"
		match: "(?:^|\\G)(but|empty|goal|here|lexical|lookahead|not?|of|one|or)$"


	# Symbols that don't point to other production rules
	terminal:
		patterns: [
			{include: "#assertion"}
			{include: "#literal"}
			{include: "#unicode-char"}
			{include: "#unicode-codepoint"}
		]


	# Character's Unicode name enclosed in angle-brackets: “<NBSP>”
	"unicode-char":
		name: "constant.character.named.unicode-name.grammarkdown"
		match: "(<)[^>]+(>)"
		captures:
			1: name: "punctuation.definition.character.begin.grammarkdown"
			2: name: "punctuation.definition.character.end.grammarkdown"


	# Unicode character range: “U+0000 through U+0007F”
	"unicode-range":
		name:  "meta.character-range.grammarkdown"
		match: """(?x)
			((<[^>]+>) | (U\\+[A-Fa-f0-9]+))
			\\s+ (through) \\s+
			((<[^>]+>) | (U\\+[A-Fa-f0-9]+))
		"""
		captures:
			1: name: "meta.start-character.grammarkdown"
			2: patterns: [include: "#unicode-char"]
			3: patterns: [include: "#unicode-codepoint"]
			4: name: "keyword.operator.range.grammarkdown"
			5: name: "meta.end-character.grammarkdown"
			6: patterns: [include: "#unicode-char"]
			7: patterns: [include: "#unicode-codepoint"]


	# Unicode code point literal: “U+007F”
	"unicode-codepoint":
		name: "constant.numeric.other.codepoint.grammarkdown"
		match: "U\\+[A-Fa-f0-9]+"
